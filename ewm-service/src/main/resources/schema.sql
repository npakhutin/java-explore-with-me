drop table if exists subscriptions cascade;

drop table if exists event_compilation cascade;

drop table if exists compilations cascade;

drop table if exists users cascade;

drop table if exists categories cascade;

drop table if exists events cascade;

drop table if exists requests cascade;

create table if not exists users (
    id BIGINT generated by default as identity primary key,
    name VARCHAR(255) not null,
    email VARCHAR(512) unique not null
);

create table if not exists categories (
    id BIGINT generated by default as identity primary key,
    name VARCHAR(255) unique not null
);

create table if not exists events (
    id BIGINT generated by default as identity primary key,
    annotation VARCHAR(2000) not null,
    category_id BIGINT not null references categories(id),
    conf_requests INTEGER not null,
    created_on TIMESTAMP without time zone not null,
    description VARCHAR(7000) not null,
    event_date TIMESTAMP without time zone not null,
    initiator_id BIGINT not null references users(id),
    lat FLOAT not null,
    lon FLOAT not null,
    paid BOOLEAN not null,
    part_limit INTEGER not null,
    published_on TIMESTAMP without time zone,
    req_moderation BOOLEAN not null,
    state VARCHAR(15) not null,
    title VARCHAR(120) not null
);

create table if not exists requests (
    id BIGINT generated by default as identity primary key,
    created TIMESTAMP without time zone not null,
    requester_id BIGINT not null references users(id),
    event_id BIGINT not null references events(id),
    status VARCHAR(15) not null,
    unique (
        requester_id,
        event_id
    )
);

create table if not exists compilations (
    id BIGINT generated by default as identity primary key,
    pinned BOOLEAN not null,
    title VARCHAR(50) not null
);

create table if not exists event_compilation (
    event_id BIGINT not null references events(id),
    compilation_id BIGINT not null references compilations(id),
    constraint pk_event_compilation primary key (
        event_id,
        compilation_id
    )
);

create table if not exists subscriptions (
    subscriber_id BIGINT not null references users(id),
    events_initiator_id BIGINT not null references users(id),
    constraint pk_subscriptions primary key (
        subscriber_id,
        events_initiator_id
    )
);
